---
alwaysApply: true
---
1. NEVER USE FAKE DATA!!!
2. NEVER USE FALLBACKS!!!
3. NEVER USE ARBITRARY THRESHOLDS OR INTRODUCE ONES!!.
4. YOU SHAL NEVER CORRUPT THE API FILES!
5. IF YOU HAVE A PROBLEM WITH API's YOU SHALL APPROACH THE API FILES!
6. YOU WILL ALLWAYS USE SCIENTIFICALLY VALIDATED DATA!!!
7. You shall never make duplications in the code and maintain clear and visible code !
8. you are not allowed to use placeholders!
9. The Code Should Allways remain Clean And Tight Without Redundancies and Duplications
10. You will all ways prefer a strong and Clear Project,Folder and Data Structure Instead of Writing everything into One File.
11. MANDATORY CACHE VALIDATION: Always check for cached data before fetching new data. Implement proper cache cleanup after operations to prevent memory bloat.
12. REAL DATA ENFORCEMENT: Use only real scientific datasets, gene sequences, protein structures, and validated experimental results. NO mock, synthetic, or placeholder data permitted.
13. ERROR HANDLING REQUIREMENTS: All errors must be returned as structured JSON with fields: type, message, citation, and recommended_next_step. No generic error messages.
14. PARALLEL PROCESSING MANDATE: Always use parallel processing for computational operations when possible. Implement multi-threading for genome searches, data analysis, and batch operations.
15. FILE STRUCTURE IMMUTABILITY: Never create files outside existing folder hierarchy. Maintain exact directory structure as defined in Structure.txt. No temporary files in root directories.
16. SCIENTIFIC VALIDATION REQUIREMENTS: Include references to API files (AlphaFold_API.txt, Subtiwiki_API.txt) and validation documents in all backend code comments for traceability.
17. LOGGING STANDARDS: Write comprehensive logs to files. Log after every 10 epochs in training with all relevant metrics (accuracy, loss, feature importance, model statistics).
18. NO PLACEHOLDER IMPLEMENTATIONS: Every method, function, and class must be fully implemented. No TODO comments, no stub functions, no incomplete logic paths.
19. CONSTANT DOCUMENTATION: When using mathematical constants or thresholds in calculations, explicitly document their scientific basis and cite sources in comments.
20. UNIFIED SERVICE ARCHITECTURE: Implement API clients as unified services with sub-methods for each external API. Use HADDOCK-like algorithms with complete scoring calculations.
21. MANUAL INPUT VALIDATION: Accept manual protein names and transform via SubtiWiki/UniProt API endpoints. Validate all inputs against known databases before processing.
22. MEMORY MANAGEMENT: Implement proper cleanup after all operations. Use context managers for file operations. Clear variables and close connections explicitly.
23. TESTING REQUIREMENTS: Write comprehensive tests using real data before implementing any feature. Tests must follow actual data pipeline flow, no mock data allowed.
24. INDEPENDENCE REQUIREMENT: Take action without asking permission unless attempted more than 3 times or at critical decision points. Be proactive in problem-solving.
25. GENE ANNOTATION STANDARDS: Annotate overlaps with format <bp_number>[Gene] or [Gene]<bp_number>. Omit redundant CDS tags when overlap falls within gene boundaries.
26. VIRTUAL ENVIRONMENT COMPLIANCE: Use single Python installation by default. Only create virtual environments when explicitly needed for dependency isolation.
27. OUTPUT FORMATTING: Keep all app outputs clean and professional. if you are using emojis you have to check the its compatible , no unnecessary whitespace, no verbose descriptions unless scientifically relevant.
28. BACKUP AND VERSIONING: Never commit to git automatically. Maintain clean commit history with descriptive messages when manual commits are made.
29. CROSS-PLATFORM COMPATIBILITY: Use PowerShell for command execution on Windows systems. Ensure path handling works across operating systems.
30. DOCUMENTATION REQUIREMENTS: Every function must have docstrings explaining purpose, parameters, return values, and any scientific methodology used.
